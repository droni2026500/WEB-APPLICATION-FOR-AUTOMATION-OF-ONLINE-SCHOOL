import { GridKeyValue, GridValidRowModel } from '@mui/x-data-grid-pro';
import type { GridControlledStateEventLookupPro, GridApiCachesPro } from '@mui/x-data-grid-pro/typeOverloads';
import type { GridGroupingValueGetterParams } from '../models';
import type { GridRowGroupingModel } from '../hooks';
import { GridRowGroupingInternalCache } from '../hooks/features/rowGrouping/gridRowGroupingInterfaces';
export interface GridControlledStateEventLookupPremium {
    /**
     * Fired when the row grouping model changes.
     */
    rowGroupingModelChange: {
        params: GridRowGroupingModel;
    };
}
export interface GridColDefPremium<R extends GridValidRowModel = any, V = any, F = V> {
    /**
     * Function that transforms a complex cell value into a key that be used for grouping the rows.
     * @param {GridGroupingValueGetterParams} params Object containing parameters for the getter.
     * @returns {GridKeyValue | null | undefined} The cell key.
     */
    groupingValueGetter?: (params: GridGroupingValueGetterParams<V, R>) => GridKeyValue | null | undefined;
}
export interface GridApiCachesPremium extends GridApiCachesPro {
    rowGrouping: GridRowGroupingInternalCache;
}
declare module '@mui/x-data-grid-pro' {
    interface GridColDef<R extends GridValidRowModel = any, V = any, F = V> extends GridColDefPremium<R, V, F> {
    }
    interface GridControlledStateEventLookup extends GridControlledStateEventLookupPro, GridControlledStateEventLookupPremium {
    }
}
declare module '@mui/x-data-grid-pro/internals' {
    interface GridApiCaches extends GridApiCachesPremium {
    }
}
