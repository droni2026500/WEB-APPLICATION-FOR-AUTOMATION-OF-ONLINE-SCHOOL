{"ast":null,"code":"import _slicedToArray from \"/Users/skhotwow/Desktop/\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/skhotwow/Desktop/\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C/client/src/components/admin/ChatBotsPage.jsx\";\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport Button from \"@mui/material/Button\";\nimport MyModal from \"../UI/MyModal/MyModal\";\nimport ChatBotChannelAdd from \"./ChatBotChannelAdd\";\nimport { Context } from \"../../index\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nvar columns = [{\n  field: \"id\",\n  headerName: \"ID\",\n  width: 90,\n  hide: true\n}, {\n  field: \"name\",\n  headerName: \"Название канала\",\n  width: 170,\n  editable: false,\n  sortable: false\n}, {\n  field: \"channel_id\",\n  headerName: \"ID канала\",\n  width: 180,\n  editable: false,\n  sortable: false\n}, {\n  field: \"link\",\n  headerName: \"Ссылка\",\n  width: 150,\n  editable: false,\n  sortable: false,\n  renderCell: function renderCell(cellValues) {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      href: \"\".concat(cellValues.row.link),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }\n    }, \"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0430\");\n  }\n}];\n\nvar ChatBotsPage = function ChatBotsPage() {\n  var _useContext = useContext(Context),\n      store = _useContext.store;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modal = _useState2[0],\n      setModal = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rows = _useState4[0],\n      setRows = _useState4[1];\n\n  useEffect(function () {\n    store.getChannels().then(function (response) {\n      var requiredDataFromResponse = response;\n      var data = requiredDataFromResponse.map(function (eachSensorItem) {\n        return {\n          id: eachSensorItem.id,\n          name: eachSensorItem.name,\n          channel_id: eachSensorItem.channel_id,\n          link: eachSensorItem.link\n        };\n      });\n      console.log(data);\n      setRows(data);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"\\u0427\\u0430\\u0442-\\u0431\\u043E\\u0442 \\u0434\\u043B\\u044F \\u043A\\u0430\\u043D\\u0430\\u043B\\u043E\\u0432 \\u043F\\u043E \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430\\u043C\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 400,\n      width: \"100%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: rows,\n    columns: columns,\n    pageSize: 5,\n    rowsPerPageOptions: [5],\n    checkboxSelection: true,\n    disableSelectionOnClick: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: function onClick() {\n      return setModal(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043A\\u0430\\u043D\\u0430\\u043B \\u043F\\u043E \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430\\u043C\"), /*#__PURE__*/React.createElement(MyModal, {\n    visible: modal,\n    setVisible: setModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChatBotChannelAdd, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default observer(ChatBotsPage);","map":{"version":3,"names":["React","useContext","useEffect","useState","observer","Button","MyModal","ChatBotChannelAdd","Context","DataGrid","GridColDef","columns","field","headerName","width","hide","editable","sortable","renderCell","cellValues","row","link","ChatBotsPage","store","modal","setModal","rows","setRows","getChannels","then","response","requiredDataFromResponse","data","map","eachSensorItem","id","name","channel_id","console","log","height"],"sources":["/Users/skhotwow/Desktop/Диплом/client/src/components/admin/ChatBotsPage.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport Button from \"@mui/material/Button\";\nimport MyModal from \"../UI/MyModal/MyModal\";\nimport ChatBotChannelAdd from \"./ChatBotChannelAdd\";\nimport { Context } from \"../../index\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\n\nconst columns: GridColDef[] = [\n  { field: \"id\", headerName: \"ID\", width: 90, hide: true },\n  {\n    field: \"name\",\n    headerName: \"Название канала\",\n    width: 170,\n    editable: false,\n    sortable: false,\n  },\n  {\n    field: \"channel_id\",\n    headerName: \"ID канала\",\n    width: 180,\n    editable: false,\n    sortable: false,\n  },\n  {\n    field: \"link\",\n    headerName: \"Ссылка\",\n    width: 150,\n    editable: false,\n    sortable: false,\n    renderCell: (cellValues) => {\n      return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`${cellValues.row.link}`}>Ссылка</a>;\n    }\n  },\n];\nconst ChatBotsPage = () => {\n  const { store } = useContext(Context);\n  const [modal, setModal] = useState(false);\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    store.getChannels().then((response) => {\n      const requiredDataFromResponse = response;\n      const data = requiredDataFromResponse.map((eachSensorItem) => ({\n        id: eachSensorItem.id,\n        name: eachSensorItem.name,\n        channel_id: eachSensorItem.channel_id,\n        link: eachSensorItem.link,\n      }));\n      console.log(data);\n      setRows(data);\n    });\n  }, []);\n  return (\n    <div>\n      {/*<div>Чат-бот для сотрудников</div>*/}\n      <div>\n        <h1>Чат-бот для каналов по городам</h1>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            rows={rows}\n            columns={columns}\n            pageSize={5}\n            rowsPerPageOptions={[5]}\n            checkboxSelection\n            disableSelectionOnClick\n          />\n        </div>\n      </div>\n\n      <Button variant=\"contained\" onClick={() => setModal(true)}>\n        Добавить канал по городам\n      </Button>\n      <MyModal visible={modal} setVisible={setModal}>\n        <ChatBotChannelAdd />\n      </MyModal>\n      {/*<div>Чат-бот для учеников</div>*/}\n    </div>\n  );\n};\n\nexport default observer(ChatBotsPage);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}